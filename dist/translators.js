'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.xmmToRapidMixModel=exports.rapidMixToXmmTrainingSet=undefined;var _xmmClient=require('xmm-client');var Xmm=_interopRequireWildcard(_xmmClient);var _constants=require('./constants');function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}/* * * * * * * * * * * * * * * TrainingSet * * * * * * * * * * * * * * * * * *//** @private */var xmmToRapidMixTrainingSet=function xmmToRapidMixTrainingSet(xmmSet){// TODO
return null;};/**
 * Convert a RapidMix training set Object to an XMM training set Object.
 */var rapidMixToXmmTrainingSet=function rapidMixToXmmTrainingSet(rmSet){var payload=rmSet.payload;var config={bimodal:payload.outputDimension>0,dimension:payload.inputDimension+payload.outputDimension,dimensionInput:payload.outputDimension>0?payload.inputDimension:0};var phraseMaker=new Xmm.PhraseMaker(config);var setMaker=new Xmm.SetMaker();for(var i=0;i<payload.data.length;i++){var datum=payload.data[i];phraseMaker.reset();phraseMaker.setConfig({label:datum.label});for(var j=0;j<datum.input.length;j++){var vector=datum.input[j];if(payload.outputDimension>0)vector=vector.concat(datum.output[j]);phraseMaker.addObservation(vector);}setMaker.addPhrase(phraseMaker.getPhrase());}return setMaker.getTrainingSet();};/* * * * * * * * * * * * * * * * * Model * * * * * * * * * * * * * * * * * * *//**
 * Convert an XMM model Object to a RapidMix model Object.
 */var xmmToRapidMixModel=function xmmToRapidMixModel(xmmModel){var modelType=xmmModel.configuration.default_parameters.states?'hhmm':'gmm';return{docType:'rapid-mix:ml:model',docVersion:_constants.rapidMixDocVersion,target:{name:'xmm:'+modelType,version:'1.0.0'},payload:xmmModel};};/** @private */var rapidMixToXmmModel=function rapidMixToXmmModel(rmModel){// TODO
return null;};exports.rapidMixToXmmTrainingSet=rapidMixToXmmTrainingSet;exports.xmmToRapidMixModel=xmmToRapidMixModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMuanMiXSwibmFtZXMiOlsiWG1tIiwieG1tVG9SYXBpZE1peFRyYWluaW5nU2V0IiwicmFwaWRNaXhUb1htbVRyYWluaW5nU2V0IiwicGF5bG9hZCIsInJtU2V0IiwiY29uZmlnIiwiYmltb2RhbCIsIm91dHB1dERpbWVuc2lvbiIsImRpbWVuc2lvbiIsImlucHV0RGltZW5zaW9uIiwiZGltZW5zaW9uSW5wdXQiLCJwaHJhc2VNYWtlciIsIlBocmFzZU1ha2VyIiwic2V0TWFrZXIiLCJTZXRNYWtlciIsImkiLCJkYXRhIiwibGVuZ3RoIiwiZGF0dW0iLCJyZXNldCIsInNldENvbmZpZyIsImxhYmVsIiwiaiIsImlucHV0IiwidmVjdG9yIiwiY29uY2F0Iiwib3V0cHV0IiwiYWRkT2JzZXJ2YXRpb24iLCJhZGRQaHJhc2UiLCJnZXRQaHJhc2UiLCJnZXRUcmFpbmluZ1NldCIsInhtbVRvUmFwaWRNaXhNb2RlbCIsIm1vZGVsVHlwZSIsInhtbU1vZGVsIiwiY29uZmlndXJhdGlvbiIsImRlZmF1bHRfcGFyYW1ldGVycyIsInN0YXRlcyIsImRvY1R5cGUiLCJkb2NWZXJzaW9uIiwidGFyZ2V0IiwibmFtZSIsInZlcnNpb24iLCJyYXBpZE1peFRvWG1tTW9kZWwiXSwibWFwcGluZ3MiOiI0SUFBQSxxQyxHQUFZQSxJLHFDQUNaLHNDLDBPQUVBLCtFQUVBLGVBQ0EsR0FBTUMsMEJBQTJCLFFBQTNCQSx5QkFBMkIsUUFBVSxDQUN6QztBQUNBLE1BQU8sS0FBUCxDQUNELENBSEQsQ0FLQTs7R0FHQSxHQUFNQywwQkFBMkIsUUFBM0JBLHlCQUEyQixPQUFTLENBQ3hDLEdBQU1DLFNBQVVDLE1BQU1ELE9BQXRCLENBRUEsR0FBTUUsUUFBUyxDQUNiQyxRQUFTSCxRQUFRSSxlQUFSLENBQTBCLENBRHRCLENBRWJDLFVBQVdMLFFBQVFNLGNBQVIsQ0FBeUJOLFFBQVFJLGVBRi9CLENBR2JHLGVBQWlCUCxRQUFRSSxlQUFSLENBQTBCLENBQTNCLENBQWdDSixRQUFRTSxjQUF4QyxDQUF5RCxDQUg1RCxDQUFmLENBTUEsR0FBTUUsYUFBYyxHQUFJWCxLQUFJWSxXQUFSLENBQW9CUCxNQUFwQixDQUFwQixDQUNBLEdBQU1RLFVBQVcsR0FBSWIsS0FBSWMsUUFBUixFQUFqQixDQUVBLElBQUssR0FBSUMsR0FBSSxDQUFiLENBQWdCQSxFQUFJWixRQUFRYSxJQUFSLENBQWFDLE1BQWpDLENBQXlDRixHQUF6QyxDQUE4QyxDQUM1QyxHQUFNRyxPQUFRZixRQUFRYSxJQUFSLENBQWFELENBQWIsQ0FBZCxDQUVBSixZQUFZUSxLQUFaLEdBQ0FSLFlBQVlTLFNBQVosQ0FBc0IsQ0FBRUMsTUFBT0gsTUFBTUcsS0FBZixDQUF0QixFQUVBLElBQUssR0FBSUMsR0FBSSxDQUFiLENBQWdCQSxFQUFJSixNQUFNSyxLQUFOLENBQVlOLE1BQWhDLENBQXdDSyxHQUF4QyxDQUE2QyxDQUMzQyxHQUFJRSxRQUFTTixNQUFNSyxLQUFOLENBQVlELENBQVosQ0FBYixDQUVBLEdBQUluQixRQUFRSSxlQUFSLENBQTBCLENBQTlCLENBQ0VpQixPQUFTQSxPQUFPQyxNQUFQLENBQWNQLE1BQU1RLE1BQU4sQ0FBYUosQ0FBYixDQUFkLENBQVQsQ0FFRlgsWUFBWWdCLGNBQVosQ0FBMkJILE1BQTNCLEVBQ0QsQ0FFRFgsU0FBU2UsU0FBVCxDQUFtQmpCLFlBQVlrQixTQUFaLEVBQW5CLEVBQ0QsQ0FFRCxNQUFPaEIsVUFBU2lCLGNBQVQsRUFBUCxDQUNELENBL0JELENBaUNBLCtFQUVBOztHQUdBLEdBQU1DLG9CQUFxQixRQUFyQkEsbUJBQXFCLFVBQVksQ0FDckMsR0FBTUMsV0FBWUMsU0FBU0MsYUFBVCxDQUF1QkMsa0JBQXZCLENBQTBDQyxNQUExQyxDQUFtRCxNQUFuRCxDQUE0RCxLQUE5RSxDQUVBLE1BQU8sQ0FDTEMsUUFBUyxvQkFESixDQUVMQyx3Q0FGSyxDQUdMQyxPQUFRLENBQ05DLFlBQWFSLFNBRFAsQ0FFTlMsUUFBUyxPQUZILENBSEgsQ0FPTHRDLFFBQVM4QixRQVBKLENBQVAsQ0FTRCxDQVpELENBY0EsZUFDQSxHQUFNUyxvQkFBcUIsUUFBckJBLG1CQUFxQixTQUFXLENBQ3BDO0FBQ0EsTUFBTyxLQUFQLENBQ0QsQ0FIRCxDLFFBT0V4Qyx3QixDQUFBQSx3QixTQUNBNkIsa0IsQ0FBQUEsa0IiLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFhtbSBmcm9tICd4bW0tY2xpZW50JztcbmltcG9ydCB7IHJhcGlkTWl4RG9jVmVyc2lvbiB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqIFRyYWluaW5nU2V0ICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiogQHByaXZhdGUgKi9cbmNvbnN0IHhtbVRvUmFwaWRNaXhUcmFpbmluZ1NldCA9IHhtbVNldCA9PiB7XG4gIC8vIFRPRE9cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ29udmVydCBhIFJhcGlkTWl4IHRyYWluaW5nIHNldCBPYmplY3QgdG8gYW4gWE1NIHRyYWluaW5nIHNldCBPYmplY3QuXG4gKi9cbmNvbnN0IHJhcGlkTWl4VG9YbW1UcmFpbmluZ1NldCA9IHJtU2V0ID0+IHtcbiAgY29uc3QgcGF5bG9hZCA9IHJtU2V0LnBheWxvYWQ7XG5cbiAgY29uc3QgY29uZmlnID0ge1xuICAgIGJpbW9kYWw6IHBheWxvYWQub3V0cHV0RGltZW5zaW9uID4gMCxcbiAgICBkaW1lbnNpb246IHBheWxvYWQuaW5wdXREaW1lbnNpb24gKyBwYXlsb2FkLm91dHB1dERpbWVuc2lvbixcbiAgICBkaW1lbnNpb25JbnB1dDogKHBheWxvYWQub3V0cHV0RGltZW5zaW9uID4gMCkgPyBwYXlsb2FkLmlucHV0RGltZW5zaW9uIDogMCxcbiAgfTtcblxuICBjb25zdCBwaHJhc2VNYWtlciA9IG5ldyBYbW0uUGhyYXNlTWFrZXIoY29uZmlnKTtcbiAgY29uc3Qgc2V0TWFrZXIgPSBuZXcgWG1tLlNldE1ha2VyKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXlsb2FkLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkYXR1bSA9IHBheWxvYWQuZGF0YVtpXTtcblxuICAgIHBocmFzZU1ha2VyLnJlc2V0KCk7XG4gICAgcGhyYXNlTWFrZXIuc2V0Q29uZmlnKHsgbGFiZWw6IGRhdHVtLmxhYmVsIH0pO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXR1bS5pbnB1dC5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IHZlY3RvciA9IGRhdHVtLmlucHV0W2pdO1xuXG4gICAgICBpZiAocGF5bG9hZC5vdXRwdXREaW1lbnNpb24gPiAwKVxuICAgICAgICB2ZWN0b3IgPSB2ZWN0b3IuY29uY2F0KGRhdHVtLm91dHB1dFtqXSk7XG5cbiAgICAgIHBocmFzZU1ha2VyLmFkZE9ic2VydmF0aW9uKHZlY3Rvcik7XG4gICAgfVxuXG4gICAgc2V0TWFrZXIuYWRkUGhyYXNlKHBocmFzZU1ha2VyLmdldFBocmFzZSgpKTtcbiAgfVxuXG4gIHJldHVybiBzZXRNYWtlci5nZXRUcmFpbmluZ1NldCgpO1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqIE1vZGVsICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qKlxuICogQ29udmVydCBhbiBYTU0gbW9kZWwgT2JqZWN0IHRvIGEgUmFwaWRNaXggbW9kZWwgT2JqZWN0LlxuICovXG5jb25zdCB4bW1Ub1JhcGlkTWl4TW9kZWwgPSB4bW1Nb2RlbCA9PiB7XG4gIGNvbnN0IG1vZGVsVHlwZSA9IHhtbU1vZGVsLmNvbmZpZ3VyYXRpb24uZGVmYXVsdF9wYXJhbWV0ZXJzLnN0YXRlcyA/ICdoaG1tJyA6ICdnbW0nO1xuXG4gIHJldHVybiB7XG4gICAgZG9jVHlwZTogJ3JhcGlkLW1peDptbDptb2RlbCcsXG4gICAgZG9jVmVyc2lvbjogcmFwaWRNaXhEb2NWZXJzaW9uLFxuICAgIHRhcmdldDoge1xuICAgICAgbmFtZTogYHhtbToke21vZGVsVHlwZX1gLFxuICAgICAgdmVyc2lvbjogJzEuMC4wJ1xuICAgIH0sXG4gICAgcGF5bG9hZDogeG1tTW9kZWwsXG4gIH1cbn07XG5cbi8qKiBAcHJpdmF0ZSAqL1xuY29uc3QgcmFwaWRNaXhUb1htbU1vZGVsID0gcm1Nb2RlbCA9PiB7XG4gIC8vIFRPRE9cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQge1xuICAvLyB4bW1Ub1JhcGlkTWl4VHJhaW5pbmdTZXQsXG4gIHJhcGlkTWl4VG9YbW1UcmFpbmluZ1NldCxcbiAgeG1tVG9SYXBpZE1peE1vZGVsLFxuICAvLyByYXBpZE1peFRvWG1tTW9kZWwsXG59O1xuIl19