'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _xmmClient=require('xmm-client');var Xmm=_interopRequireWildcard(_xmmClient);var _constants=require('./constants');function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}/* * * * * * * * * * * * * * * TrainingSet * * * * * * * * * * * * * * * * * *//** @private */var xmmToRapidMixTrainingSet=function xmmToRapidMixTrainingSet(xmmSet){// TODO
return null;};/**
 * Convert a RapidMix training set Object to an XMM training set Object.
 */var rapidMixToXmmTrainingSet=function rapidMixToXmmTrainingSet(rmSet){var payload=rmSet.payload;var config={bimodal:payload.outputDimension>0,dimension:payload.inputDimension+payload.outputDimension,dimensionInput:payload.outputDimension>0?payload.inputDimension:0};var phraseMaker=new Xmm.PhraseMaker(config);var setMaker=new Xmm.SetMaker();for(var i=0;i<payload.data.length;i++){var datum=payload.data[i];phraseMaker.reset();phraseMaker.setConfig({label:datum.label});for(var j=0;j<datum.input.length;j++){var vector=datum.input[j];if(payload.outputDimension>0)vector=vector.concat(datum.output[j]);phraseMaker.addObservation(vector);}setMaker.addPhrase(phraseMaker.getPhrase());}return setMaker.getTrainingSet();};/**
 * Convert a RapidMix training set Object to a RapidLib training set Object.
 */var rapidMixToRapidLibTrainingSet=function rapidMixToRapidLibTrainingSet(rmSet){var rlSet=[];for(var i=0;i<rmSet.payload.data.length;i++){var phrase=rmSet.payload.data[i];for(var j=0;j<phrase.input.length;j++){var el={label:phrase.label,input:phrase.input[j],output:phrase.output.length>0?phrase.output[j]:[]};rlSet.push(el);}}return rlSet;};/* * * * * * * * * * * * * * * * * Model * * * * * * * * * * * * * * * * * * *//**
 * Convert an XMM model Object to a RapidMix model Object.
 */var xmmToRapidMixModel=function xmmToRapidMixModel(xmmModel){var modelType=xmmModel.configuration.default_parameters.states?'hhmm':'gmm';return{docType:'rapid-mix:ml:model',docVersion:_constants.rapidMixDocVersion,target:{name:'xmm:'+modelType,version:'1.0.0'},payload:xmmModel};};/** @private */var rapidMixToXmmModel=function rapidMixToXmmModel(rmModel){// TODO
return null;};exports.default={// xmmToRapidMixTrainingSet,
rapidMixToXmmTrainingSet:rapidMixToXmmTrainingSet,xmmToRapidMixModel:xmmToRapidMixModel// rapidMixToXmmModel,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMuanMiXSwibmFtZXMiOlsiWG1tIiwieG1tVG9SYXBpZE1peFRyYWluaW5nU2V0IiwicmFwaWRNaXhUb1htbVRyYWluaW5nU2V0IiwicGF5bG9hZCIsInJtU2V0IiwiY29uZmlnIiwiYmltb2RhbCIsIm91dHB1dERpbWVuc2lvbiIsImRpbWVuc2lvbiIsImlucHV0RGltZW5zaW9uIiwiZGltZW5zaW9uSW5wdXQiLCJwaHJhc2VNYWtlciIsIlBocmFzZU1ha2VyIiwic2V0TWFrZXIiLCJTZXRNYWtlciIsImkiLCJkYXRhIiwibGVuZ3RoIiwiZGF0dW0iLCJyZXNldCIsInNldENvbmZpZyIsImxhYmVsIiwiaiIsImlucHV0IiwidmVjdG9yIiwiY29uY2F0Iiwib3V0cHV0IiwiYWRkT2JzZXJ2YXRpb24iLCJhZGRQaHJhc2UiLCJnZXRQaHJhc2UiLCJnZXRUcmFpbmluZ1NldCIsInJhcGlkTWl4VG9SYXBpZExpYlRyYWluaW5nU2V0IiwicmxTZXQiLCJwaHJhc2UiLCJlbCIsInB1c2giLCJ4bW1Ub1JhcGlkTWl4TW9kZWwiLCJtb2RlbFR5cGUiLCJ4bW1Nb2RlbCIsImNvbmZpZ3VyYXRpb24iLCJkZWZhdWx0X3BhcmFtZXRlcnMiLCJzdGF0ZXMiLCJkb2NUeXBlIiwiZG9jVmVyc2lvbiIsInRhcmdldCIsIm5hbWUiLCJ2ZXJzaW9uIiwicmFwaWRNaXhUb1htbU1vZGVsIl0sIm1hcHBpbmdzIjoic0VBQUEscUMsR0FBWUEsSSxxQ0FDWixzQywwT0FFQSwrRUFFQSxlQUNBLEdBQU1DLDBCQUEyQixRQUEzQkEseUJBQTJCLFFBQVUsQ0FDekM7QUFDQSxNQUFPLEtBQVAsQ0FDRCxDQUhELENBS0E7O0dBR0EsR0FBTUMsMEJBQTJCLFFBQTNCQSx5QkFBMkIsT0FBUyxDQUN4QyxHQUFNQyxTQUFVQyxNQUFNRCxPQUF0QixDQUVBLEdBQU1FLFFBQVMsQ0FDYkMsUUFBU0gsUUFBUUksZUFBUixDQUEwQixDQUR0QixDQUViQyxVQUFXTCxRQUFRTSxjQUFSLENBQXlCTixRQUFRSSxlQUYvQixDQUdiRyxlQUFpQlAsUUFBUUksZUFBUixDQUEwQixDQUEzQixDQUFnQ0osUUFBUU0sY0FBeEMsQ0FBeUQsQ0FINUQsQ0FBZixDQU1BLEdBQU1FLGFBQWMsR0FBSVgsS0FBSVksV0FBUixDQUFvQlAsTUFBcEIsQ0FBcEIsQ0FDQSxHQUFNUSxVQUFXLEdBQUliLEtBQUljLFFBQVIsRUFBakIsQ0FFQSxJQUFLLEdBQUlDLEdBQUksQ0FBYixDQUFnQkEsRUFBSVosUUFBUWEsSUFBUixDQUFhQyxNQUFqQyxDQUF5Q0YsR0FBekMsQ0FBOEMsQ0FDNUMsR0FBTUcsT0FBUWYsUUFBUWEsSUFBUixDQUFhRCxDQUFiLENBQWQsQ0FFQUosWUFBWVEsS0FBWixHQUNBUixZQUFZUyxTQUFaLENBQXNCLENBQUVDLE1BQU9ILE1BQU1HLEtBQWYsQ0FBdEIsRUFFQSxJQUFLLEdBQUlDLEdBQUksQ0FBYixDQUFnQkEsRUFBSUosTUFBTUssS0FBTixDQUFZTixNQUFoQyxDQUF3Q0ssR0FBeEMsQ0FBNkMsQ0FDM0MsR0FBSUUsUUFBU04sTUFBTUssS0FBTixDQUFZRCxDQUFaLENBQWIsQ0FFQSxHQUFJbkIsUUFBUUksZUFBUixDQUEwQixDQUE5QixDQUNFaUIsT0FBU0EsT0FBT0MsTUFBUCxDQUFjUCxNQUFNUSxNQUFOLENBQWFKLENBQWIsQ0FBZCxDQUFULENBRUZYLFlBQVlnQixjQUFaLENBQTJCSCxNQUEzQixFQUNELENBRURYLFNBQVNlLFNBQVQsQ0FBbUJqQixZQUFZa0IsU0FBWixFQUFuQixFQUNELENBRUQsTUFBT2hCLFVBQVNpQixjQUFULEVBQVAsQ0FDRCxDQS9CRCxDQWlDQTs7R0FHQSxHQUFNQywrQkFBZ0MsUUFBaENBLDhCQUFnQyxPQUFTLENBQzdDLEdBQU1DLE9BQVEsRUFBZCxDQUVBLElBQUssR0FBSWpCLEdBQUksQ0FBYixDQUFnQkEsRUFBSVgsTUFBTUQsT0FBTixDQUFjYSxJQUFkLENBQW1CQyxNQUF2QyxDQUErQ0YsR0FBL0MsQ0FBb0QsQ0FDbEQsR0FBTWtCLFFBQVM3QixNQUFNRCxPQUFOLENBQWNhLElBQWQsQ0FBbUJELENBQW5CLENBQWYsQ0FFQSxJQUFLLEdBQUlPLEdBQUksQ0FBYixDQUFnQkEsRUFBSVcsT0FBT1YsS0FBUCxDQUFhTixNQUFqQyxDQUF5Q0ssR0FBekMsQ0FBOEMsQ0FDNUMsR0FBTVksSUFBSyxDQUNUYixNQUFPWSxPQUFPWixLQURMLENBRVRFLE1BQU9VLE9BQU9WLEtBQVAsQ0FBYUQsQ0FBYixDQUZFLENBR1RJLE9BQVFPLE9BQU9QLE1BQVAsQ0FBY1QsTUFBZCxDQUF1QixDQUF2QixDQUEyQmdCLE9BQU9QLE1BQVAsQ0FBY0osQ0FBZCxDQUEzQixDQUE4QyxFQUg3QyxDQUFYLENBTUFVLE1BQU1HLElBQU4sQ0FBV0QsRUFBWCxFQUNELENBQ0YsQ0FFRCxNQUFPRixNQUFQLENBQ0QsQ0FsQkQsQ0FvQkEsK0VBRUE7O0dBR0EsR0FBTUksb0JBQXFCLFFBQXJCQSxtQkFBcUIsVUFBWSxDQUNyQyxHQUFNQyxXQUFZQyxTQUFTQyxhQUFULENBQXVCQyxrQkFBdkIsQ0FBMENDLE1BQTFDLENBQW1ELE1BQW5ELENBQTRELEtBQTlFLENBRUEsTUFBTyxDQUNMQyxRQUFTLG9CQURKLENBRUxDLHdDQUZLLENBR0xDLE9BQVEsQ0FDTkMsWUFBYVIsU0FEUCxDQUVOUyxRQUFTLE9BRkgsQ0FISCxDQU9MM0MsUUFBU21DLFFBUEosQ0FBUCxDQVNELENBWkQsQ0FjQSxlQUNBLEdBQU1TLG9CQUFxQixRQUFyQkEsbUJBQXFCLFNBQVcsQ0FDcEM7QUFDQSxNQUFPLEtBQVAsQ0FDRCxDQUhELEMsZ0JBS2UsQ0FDYjtBQUNBN0MsaURBRmEsQ0FHYmtDLHFDQUNBO0FBSmEsQyIsImZpbGUiOiJ2YWxpZGF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgWG1tIGZyb20gJ3htbS1jbGllbnQnO1xuaW1wb3J0IHsgcmFwaWRNaXhEb2NWZXJzaW9uIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogVHJhaW5pbmdTZXQgKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qKiBAcHJpdmF0ZSAqL1xuY29uc3QgeG1tVG9SYXBpZE1peFRyYWluaW5nU2V0ID0geG1tU2V0ID0+IHtcbiAgLy8gVE9ET1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgUmFwaWRNaXggdHJhaW5pbmcgc2V0IE9iamVjdCB0byBhbiBYTU0gdHJhaW5pbmcgc2V0IE9iamVjdC5cbiAqL1xuY29uc3QgcmFwaWRNaXhUb1htbVRyYWluaW5nU2V0ID0gcm1TZXQgPT4ge1xuICBjb25zdCBwYXlsb2FkID0gcm1TZXQucGF5bG9hZDtcblxuICBjb25zdCBjb25maWcgPSB7XG4gICAgYmltb2RhbDogcGF5bG9hZC5vdXRwdXREaW1lbnNpb24gPiAwLFxuICAgIGRpbWVuc2lvbjogcGF5bG9hZC5pbnB1dERpbWVuc2lvbiArIHBheWxvYWQub3V0cHV0RGltZW5zaW9uLFxuICAgIGRpbWVuc2lvbklucHV0OiAocGF5bG9hZC5vdXRwdXREaW1lbnNpb24gPiAwKSA/IHBheWxvYWQuaW5wdXREaW1lbnNpb24gOiAwLFxuICB9O1xuXG4gIGNvbnN0IHBocmFzZU1ha2VyID0gbmV3IFhtbS5QaHJhc2VNYWtlcihjb25maWcpO1xuICBjb25zdCBzZXRNYWtlciA9IG5ldyBYbW0uU2V0TWFrZXIoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBheWxvYWQuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGRhdHVtID0gcGF5bG9hZC5kYXRhW2ldO1xuXG4gICAgcGhyYXNlTWFrZXIucmVzZXQoKTtcbiAgICBwaHJhc2VNYWtlci5zZXRDb25maWcoeyBsYWJlbDogZGF0dW0ubGFiZWwgfSk7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRhdHVtLmlucHV0Lmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgdmVjdG9yID0gZGF0dW0uaW5wdXRbal07XG5cbiAgICAgIGlmIChwYXlsb2FkLm91dHB1dERpbWVuc2lvbiA+IDApXG4gICAgICAgIHZlY3RvciA9IHZlY3Rvci5jb25jYXQoZGF0dW0ub3V0cHV0W2pdKTtcblxuICAgICAgcGhyYXNlTWFrZXIuYWRkT2JzZXJ2YXRpb24odmVjdG9yKTtcbiAgICB9XG5cbiAgICBzZXRNYWtlci5hZGRQaHJhc2UocGhyYXNlTWFrZXIuZ2V0UGhyYXNlKCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldE1ha2VyLmdldFRyYWluaW5nU2V0KCk7XG59XG5cbi8qKlxuICogQ29udmVydCBhIFJhcGlkTWl4IHRyYWluaW5nIHNldCBPYmplY3QgdG8gYSBSYXBpZExpYiB0cmFpbmluZyBzZXQgT2JqZWN0LlxuICovXG5jb25zdCByYXBpZE1peFRvUmFwaWRMaWJUcmFpbmluZ1NldCA9IHJtU2V0ID0+IHtcbiAgY29uc3QgcmxTZXQgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJtU2V0LnBheWxvYWQuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBocmFzZSA9IHJtU2V0LnBheWxvYWQuZGF0YVtpXTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGhyYXNlLmlucHV0Lmxlbmd0aDsgaisrKSB7XG4gICAgICBjb25zdCBlbCA9IHtcbiAgICAgICAgbGFiZWw6IHBocmFzZS5sYWJlbCxcbiAgICAgICAgaW5wdXQ6IHBocmFzZS5pbnB1dFtqXSxcbiAgICAgICAgb3V0cHV0OiBwaHJhc2Uub3V0cHV0Lmxlbmd0aCA+IDAgPyBwaHJhc2Uub3V0cHV0W2pdIDogW10sXG4gICAgICB9O1xuXG4gICAgICBybFNldC5wdXNoKGVsKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmxTZXQ7XG59O1xuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqIE1vZGVsICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qKlxuICogQ29udmVydCBhbiBYTU0gbW9kZWwgT2JqZWN0IHRvIGEgUmFwaWRNaXggbW9kZWwgT2JqZWN0LlxuICovXG5jb25zdCB4bW1Ub1JhcGlkTWl4TW9kZWwgPSB4bW1Nb2RlbCA9PiB7XG4gIGNvbnN0IG1vZGVsVHlwZSA9IHhtbU1vZGVsLmNvbmZpZ3VyYXRpb24uZGVmYXVsdF9wYXJhbWV0ZXJzLnN0YXRlcyA/ICdoaG1tJyA6ICdnbW0nO1xuXG4gIHJldHVybiB7XG4gICAgZG9jVHlwZTogJ3JhcGlkLW1peDptbDptb2RlbCcsXG4gICAgZG9jVmVyc2lvbjogcmFwaWRNaXhEb2NWZXJzaW9uLFxuICAgIHRhcmdldDoge1xuICAgICAgbmFtZTogYHhtbToke21vZGVsVHlwZX1gLFxuICAgICAgdmVyc2lvbjogJzEuMC4wJ1xuICAgIH0sXG4gICAgcGF5bG9hZDogeG1tTW9kZWwsXG4gIH1cbn07XG5cbi8qKiBAcHJpdmF0ZSAqL1xuY29uc3QgcmFwaWRNaXhUb1htbU1vZGVsID0gcm1Nb2RlbCA9PiB7XG4gIC8vIFRPRE9cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8vIHhtbVRvUmFwaWRNaXhUcmFpbmluZ1NldCxcbiAgcmFwaWRNaXhUb1htbVRyYWluaW5nU2V0LFxuICB4bW1Ub1JhcGlkTWl4TW9kZWwsXG4gIC8vIHJhcGlkTWl4VG9YbW1Nb2RlbCxcbn07XG4iXX0=