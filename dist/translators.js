'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _xmmClient=require('xmm-client');var Xmm=_interopRequireWildcard(_xmmClient);var _constants=require('./constants');function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}/* * * * * * * * * * * * * * * TrainingSet * * * * * * * * * * * * * * * * * *//** @private */var xmmToRapidMixTrainingSet=function xmmToRapidMixTrainingSet(xmmSet){// TODO
return null;};/**
 * Convert a RapidMix training set Object to an XMM training set Object.
 */var rapidMixToXmmTrainingSet=function rapidMixToXmmTrainingSet(rmSet){var payload=rmSet.payload;var config={bimodal:payload.outputDimension>0,dimension:payload.inputDimension+payload.outputDimension,dimensionInput:payload.outputDimension>0?payload.inputDimension:0};var phraseMaker=new Xmm.PhraseMaker(config);var setMaker=new Xmm.SetMaker();for(var i=0;i<payload.data.length;i++){var datum=payload.data[i];phraseMaker.reset();phraseMaker.setConfig({label:datum.label});for(var j=0;j<datum.input.length;j++){var vector=datum.input[j];if(payload.outputDimension>0)vector=vector.concat(datum.output[j]);phraseMaker.addObservation(vector);}setMaker.addPhrase(phraseMaker.getPhrase());}return setMaker.getTrainingSet();};/**
 * Convert a RapidMix training set Object to a RapidLib training set Object.
 */var rapidMixToRapidLibTrainingSet=function rapidMixToRapidLibTrainingSet(rmSet){var rlSet=[];for(var i=0;i<rmSet.payload.data.length;i++){var phrase=rmSet.payload.data[i];for(var j=0;j<phrase.input.length;j++){var el={label:phrase.label,input:phrase.input[j],output:phrase.output.length>0?phrase.output[j]:[]};rlSet.push(el);}}return rlSet;};/* * * * * * * * * * * * * * * * * Model * * * * * * * * * * * * * * * * * * *//**
 * Convert an XMM model Object to a RapidMix model Object.
 */var xmmToRapidMixModel=function xmmToRapidMixModel(xmmModel){var modelType=xmmModel.configuration.default_parameters.states?'hhmm':'gmm';return{docType:'rapid-mix:ml:model',docVersion:_constants.rapidMixDocVersion,target:{name:'xmm:'+modelType,version:'1.0.0'},payload:xmmModel};};/** @private */var rapidMixToXmmModel=function rapidMixToXmmModel(rmModel){// TODO
return null;};exports.default={// xmmToRapidMixTrainingSet,
rapidMixToRapidLibTrainingSet:rapidMixToRapidLibTrainingSet,rapidMixToXmmTrainingSet:rapidMixToXmmTrainingSet,xmmToRapidMixModel:xmmToRapidMixModel// rapidMixToXmmModel,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMuanMiXSwibmFtZXMiOlsiWG1tIiwieG1tVG9SYXBpZE1peFRyYWluaW5nU2V0IiwicmFwaWRNaXhUb1htbVRyYWluaW5nU2V0IiwicGF5bG9hZCIsInJtU2V0IiwiY29uZmlnIiwiYmltb2RhbCIsIm91dHB1dERpbWVuc2lvbiIsImRpbWVuc2lvbiIsImlucHV0RGltZW5zaW9uIiwiZGltZW5zaW9uSW5wdXQiLCJwaHJhc2VNYWtlciIsIlBocmFzZU1ha2VyIiwic2V0TWFrZXIiLCJTZXRNYWtlciIsImkiLCJkYXRhIiwibGVuZ3RoIiwiZGF0dW0iLCJyZXNldCIsInNldENvbmZpZyIsImxhYmVsIiwiaiIsImlucHV0IiwidmVjdG9yIiwiY29uY2F0Iiwib3V0cHV0IiwiYWRkT2JzZXJ2YXRpb24iLCJhZGRQaHJhc2UiLCJnZXRQaHJhc2UiLCJnZXRUcmFpbmluZ1NldCIsInJhcGlkTWl4VG9SYXBpZExpYlRyYWluaW5nU2V0IiwicmxTZXQiLCJwaHJhc2UiLCJlbCIsInB1c2giLCJ4bW1Ub1JhcGlkTWl4TW9kZWwiLCJtb2RlbFR5cGUiLCJ4bW1Nb2RlbCIsImNvbmZpZ3VyYXRpb24iLCJkZWZhdWx0X3BhcmFtZXRlcnMiLCJzdGF0ZXMiLCJkb2NUeXBlIiwiZG9jVmVyc2lvbiIsInRhcmdldCIsIm5hbWUiLCJ2ZXJzaW9uIiwicmFwaWRNaXhUb1htbU1vZGVsIl0sIm1hcHBpbmdzIjoic0VBQUEscUMsR0FBWUEsSSxxQ0FDWixzQywwT0FFQSwrRUFFQSxlQUNBLEdBQU1DLDBCQUEyQixRQUEzQkEseUJBQTJCLFFBQVUsQ0FDekM7QUFDQSxNQUFPLEtBQVAsQ0FDRCxDQUhELENBS0E7O0dBR0EsR0FBTUMsMEJBQTJCLFFBQTNCQSx5QkFBMkIsT0FBUyxDQUN4QyxHQUFNQyxTQUFVQyxNQUFNRCxPQUF0QixDQUVBLEdBQU1FLFFBQVMsQ0FDYkMsUUFBU0gsUUFBUUksZUFBUixDQUEwQixDQUR0QixDQUViQyxVQUFXTCxRQUFRTSxjQUFSLENBQXlCTixRQUFRSSxlQUYvQixDQUdiRyxlQUFpQlAsUUFBUUksZUFBUixDQUEwQixDQUEzQixDQUFnQ0osUUFBUU0sY0FBeEMsQ0FBeUQsQ0FINUQsQ0FBZixDQU1BLEdBQU1FLGFBQWMsR0FBSVgsS0FBSVksV0FBUixDQUFvQlAsTUFBcEIsQ0FBcEIsQ0FDQSxHQUFNUSxVQUFXLEdBQUliLEtBQUljLFFBQVIsRUFBakIsQ0FFQSxJQUFLLEdBQUlDLEdBQUksQ0FBYixDQUFnQkEsRUFBSVosUUFBUWEsSUFBUixDQUFhQyxNQUFqQyxDQUF5Q0YsR0FBekMsQ0FBOEMsQ0FDNUMsR0FBTUcsT0FBUWYsUUFBUWEsSUFBUixDQUFhRCxDQUFiLENBQWQsQ0FFQUosWUFBWVEsS0FBWixHQUNBUixZQUFZUyxTQUFaLENBQXNCLENBQUVDLE1BQU9ILE1BQU1HLEtBQWYsQ0FBdEIsRUFFQSxJQUFLLEdBQUlDLEdBQUksQ0FBYixDQUFnQkEsRUFBSUosTUFBTUssS0FBTixDQUFZTixNQUFoQyxDQUF3Q0ssR0FBeEMsQ0FBNkMsQ0FDM0MsR0FBSUUsUUFBU04sTUFBTUssS0FBTixDQUFZRCxDQUFaLENBQWIsQ0FFQSxHQUFJbkIsUUFBUUksZUFBUixDQUEwQixDQUE5QixDQUNFaUIsT0FBU0EsT0FBT0MsTUFBUCxDQUFjUCxNQUFNUSxNQUFOLENBQWFKLENBQWIsQ0FBZCxDQUFULENBRUZYLFlBQVlnQixjQUFaLENBQTJCSCxNQUEzQixFQUNELENBRURYLFNBQVNlLFNBQVQsQ0FBbUJqQixZQUFZa0IsU0FBWixFQUFuQixFQUNELENBRUQsTUFBT2hCLFVBQVNpQixjQUFULEVBQVAsQ0FDRCxDQS9CRCxDQWlDQTs7R0FHQSxHQUFNQywrQkFBZ0MsUUFBaENBLDhCQUFnQyxPQUFTLENBQzdDLEdBQU1DLE9BQVEsRUFBZCxDQUVBLElBQUssR0FBSWpCLEdBQUksQ0FBYixDQUFnQkEsRUFBSVgsTUFBTUQsT0FBTixDQUFjYSxJQUFkLENBQW1CQyxNQUF2QyxDQUErQ0YsR0FBL0MsQ0FBb0QsQ0FDbEQsR0FBTWtCLFFBQVM3QixNQUFNRCxPQUFOLENBQWNhLElBQWQsQ0FBbUJELENBQW5CLENBQWYsQ0FFQSxJQUFLLEdBQUlPLEdBQUksQ0FBYixDQUFnQkEsRUFBSVcsT0FBT1YsS0FBUCxDQUFhTixNQUFqQyxDQUF5Q0ssR0FBekMsQ0FBOEMsQ0FDNUMsR0FBTVksSUFBSyxDQUNUYixNQUFPWSxPQUFPWixLQURMLENBRVRFLE1BQU9VLE9BQU9WLEtBQVAsQ0FBYUQsQ0FBYixDQUZFLENBR1RJLE9BQVFPLE9BQU9QLE1BQVAsQ0FBY1QsTUFBZCxDQUF1QixDQUF2QixDQUEyQmdCLE9BQU9QLE1BQVAsQ0FBY0osQ0FBZCxDQUEzQixDQUE4QyxFQUg3QyxDQUFYLENBTUFVLE1BQU1HLElBQU4sQ0FBV0QsRUFBWCxFQUNELENBQ0YsQ0FFRCxNQUFPRixNQUFQLENBQ0QsQ0FsQkQsQ0FvQkEsK0VBRUE7O0dBR0EsR0FBTUksb0JBQXFCLFFBQXJCQSxtQkFBcUIsVUFBWSxDQUNyQyxHQUFNQyxXQUFZQyxTQUFTQyxhQUFULENBQXVCQyxrQkFBdkIsQ0FBMENDLE1BQTFDLENBQW1ELE1BQW5ELENBQTRELEtBQTlFLENBRUEsTUFBTyxDQUNMQyxRQUFTLG9CQURKLENBRUxDLHdDQUZLLENBR0xDLE9BQVEsQ0FDTkMsWUFBYVIsU0FEUCxDQUVOUyxRQUFTLE9BRkgsQ0FISCxDQU9MM0MsUUFBU21DLFFBUEosQ0FBUCxDQVNELENBWkQsQ0FjQSxlQUNBLEdBQU1TLG9CQUFxQixRQUFyQkEsbUJBQXFCLFNBQVcsQ0FDcEM7QUFDQSxNQUFPLEtBQVAsQ0FDRCxDQUhELEMsZ0JBS2UsQ0FDYjtBQUNBaEIsMkRBRmEsQ0FHYjdCLGlEQUhhLENBSWJrQyxxQ0FDQTtBQUxhLEMiLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFhtbSBmcm9tICd4bW0tY2xpZW50JztcbmltcG9ydCB7IHJhcGlkTWl4RG9jVmVyc2lvbiB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqIFRyYWluaW5nU2V0ICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiogQHByaXZhdGUgKi9cbmNvbnN0IHhtbVRvUmFwaWRNaXhUcmFpbmluZ1NldCA9IHhtbVNldCA9PiB7XG4gIC8vIFRPRE9cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ29udmVydCBhIFJhcGlkTWl4IHRyYWluaW5nIHNldCBPYmplY3QgdG8gYW4gWE1NIHRyYWluaW5nIHNldCBPYmplY3QuXG4gKi9cbmNvbnN0IHJhcGlkTWl4VG9YbW1UcmFpbmluZ1NldCA9IHJtU2V0ID0+IHtcbiAgY29uc3QgcGF5bG9hZCA9IHJtU2V0LnBheWxvYWQ7XG5cbiAgY29uc3QgY29uZmlnID0ge1xuICAgIGJpbW9kYWw6IHBheWxvYWQub3V0cHV0RGltZW5zaW9uID4gMCxcbiAgICBkaW1lbnNpb246IHBheWxvYWQuaW5wdXREaW1lbnNpb24gKyBwYXlsb2FkLm91dHB1dERpbWVuc2lvbixcbiAgICBkaW1lbnNpb25JbnB1dDogKHBheWxvYWQub3V0cHV0RGltZW5zaW9uID4gMCkgPyBwYXlsb2FkLmlucHV0RGltZW5zaW9uIDogMCxcbiAgfTtcblxuICBjb25zdCBwaHJhc2VNYWtlciA9IG5ldyBYbW0uUGhyYXNlTWFrZXIoY29uZmlnKTtcbiAgY29uc3Qgc2V0TWFrZXIgPSBuZXcgWG1tLlNldE1ha2VyKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXlsb2FkLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkYXR1bSA9IHBheWxvYWQuZGF0YVtpXTtcblxuICAgIHBocmFzZU1ha2VyLnJlc2V0KCk7XG4gICAgcGhyYXNlTWFrZXIuc2V0Q29uZmlnKHsgbGFiZWw6IGRhdHVtLmxhYmVsIH0pO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXR1bS5pbnB1dC5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IHZlY3RvciA9IGRhdHVtLmlucHV0W2pdO1xuXG4gICAgICBpZiAocGF5bG9hZC5vdXRwdXREaW1lbnNpb24gPiAwKVxuICAgICAgICB2ZWN0b3IgPSB2ZWN0b3IuY29uY2F0KGRhdHVtLm91dHB1dFtqXSk7XG5cbiAgICAgIHBocmFzZU1ha2VyLmFkZE9ic2VydmF0aW9uKHZlY3Rvcik7XG4gICAgfVxuXG4gICAgc2V0TWFrZXIuYWRkUGhyYXNlKHBocmFzZU1ha2VyLmdldFBocmFzZSgpKTtcbiAgfVxuXG4gIHJldHVybiBzZXRNYWtlci5nZXRUcmFpbmluZ1NldCgpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBSYXBpZE1peCB0cmFpbmluZyBzZXQgT2JqZWN0IHRvIGEgUmFwaWRMaWIgdHJhaW5pbmcgc2V0IE9iamVjdC5cbiAqL1xuY29uc3QgcmFwaWRNaXhUb1JhcGlkTGliVHJhaW5pbmdTZXQgPSBybVNldCA9PiB7XG4gIGNvbnN0IHJsU2V0ID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBybVNldC5wYXlsb2FkLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwaHJhc2UgPSBybVNldC5wYXlsb2FkLmRhdGFbaV07XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBocmFzZS5pbnB1dC5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgZWwgPSB7XG4gICAgICAgIGxhYmVsOiBwaHJhc2UubGFiZWwsXG4gICAgICAgIGlucHV0OiBwaHJhc2UuaW5wdXRbal0sXG4gICAgICAgIG91dHB1dDogcGhyYXNlLm91dHB1dC5sZW5ndGggPiAwID8gcGhyYXNlLm91dHB1dFtqXSA6IFtdLFxuICAgICAgfTtcblxuICAgICAgcmxTZXQucHVzaChlbCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJsU2V0O1xufTtcblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiBNb2RlbCAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKipcbiAqIENvbnZlcnQgYW4gWE1NIG1vZGVsIE9iamVjdCB0byBhIFJhcGlkTWl4IG1vZGVsIE9iamVjdC5cbiAqL1xuY29uc3QgeG1tVG9SYXBpZE1peE1vZGVsID0geG1tTW9kZWwgPT4ge1xuICBjb25zdCBtb2RlbFR5cGUgPSB4bW1Nb2RlbC5jb25maWd1cmF0aW9uLmRlZmF1bHRfcGFyYW1ldGVycy5zdGF0ZXMgPyAnaGhtbScgOiAnZ21tJztcblxuICByZXR1cm4ge1xuICAgIGRvY1R5cGU6ICdyYXBpZC1taXg6bWw6bW9kZWwnLFxuICAgIGRvY1ZlcnNpb246IHJhcGlkTWl4RG9jVmVyc2lvbixcbiAgICB0YXJnZXQ6IHtcbiAgICAgIG5hbWU6IGB4bW06JHttb2RlbFR5cGV9YCxcbiAgICAgIHZlcnNpb246ICcxLjAuMCdcbiAgICB9LFxuICAgIHBheWxvYWQ6IHhtbU1vZGVsLFxuICB9XG59O1xuXG4vKiogQHByaXZhdGUgKi9cbmNvbnN0IHJhcGlkTWl4VG9YbW1Nb2RlbCA9IHJtTW9kZWwgPT4ge1xuICAvLyBUT0RPXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAvLyB4bW1Ub1JhcGlkTWl4VHJhaW5pbmdTZXQsXG4gIHJhcGlkTWl4VG9SYXBpZExpYlRyYWluaW5nU2V0LFxuICByYXBpZE1peFRvWG1tVHJhaW5pbmdTZXQsXG4gIHhtbVRvUmFwaWRNaXhNb2RlbCxcbiAgLy8gcmFwaWRNaXhUb1htbU1vZGVsLFxufTtcbiJdfQ==