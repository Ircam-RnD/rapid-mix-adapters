'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _assign=require('babel-runtime/core-js/object/assign');var _assign2=_interopRequireDefault(_assign);var _xmmClient=require('xmm-client');var Xmm=_interopRequireWildcard(_xmmClient);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/*
 * @module constants
 *
 * @description Constants used by the RAPID-MIX JSON specification.
 *//**
 * @constant
 * @type {String}
 * @description The RAPID-MIX JSON document specification version.
 * @default
 */var RAPID_MIX_DOC_VERSION='1.0.0';/**
 * @constant
 * @type {String}
 * @description The default RAPID-MIX label used to build training sets.
 * @default
 */var RAPID_MIX_DEFAULT_LABEL='rapidmixDefaultLabel';/*
 * @module rapidlib
 *
 * @description All the following functions convert from / to RAPID-MIX / RapidLib JS JSON objects.
 *//**
 * Convert a RAPID-MIX training set Object to a RapidLib JS training set Object.
 *
 * @param {Object} rapidMixTrainingSet - A RAPID-MIX compatible training set
 *
 * @return {Object} rapidLibTrainingSet - A RapidLib JS compatible training set
 */var rapidMixToRapidLibTrainingSet=function rapidMixToRapidLibTrainingSet(rapidMixTrainingSet){var rapidLibTrainingSet=[];for(var i=0;i<rapidMixTrainingSet.payload.data.length;i++){var phrase=rapidMixTrainingSet.payload.data[i];for(var j=0;j<phrase.input.length;j++){var el={label:phrase.label,input:phrase.input[j],output:phrase.output.length>0?phrase.output[j]:[]};rapidLibTrainingSet.push(el);}}return rapidLibTrainingSet;};/*
 * @module xmm
 *
 * @description All the following functions convert from / to rapidMix / XMM JSON objects.
 *//**
 * Convert a RAPID-MIX training set Object to an XMM training set Object.
 *
 * @param {Object} rapidMixTrainingSet - A RAPID-MIX compatible training set
 *
 * @return {Object} xmmTrainingSet - An XMM compatible training set
 */var rapidMixToXmmTrainingSet=function rapidMixToXmmTrainingSet(rapidMixTrainingSet){var payload=rapidMixTrainingSet.payload;var config={bimodal:payload.outputDimension>0,dimension:payload.inputDimension+payload.outputDimension,dimensionInput:payload.outputDimension>0?payload.inputDimension:0};if(payload.columnNames){config.columnNames=payload.columnNames.input.slice();config.columnNames=config.columnNames.concat(payload.columnNames.output);}var phraseMaker=new Xmm.PhraseMaker(config);var setMaker=new Xmm.SetMaker();for(var i=0;i<payload.data.length;i++){var datum=payload.data[i];phraseMaker.reset();phraseMaker.setConfig({label:datum.label});for(var j=0;j<datum.input.length;j++){var vector=datum.input[j];if(payload.outputDimension>0)vector=vector.concat(datum.output[j]);phraseMaker.addObservation(vector);}setMaker.addPhrase(phraseMaker.getPhrase());}return setMaker.getTrainingSet();};/**
 * Convert an XMM training set Object to a RAPID-MIX training set Object.
 *
 * @param {Object} xmmTrainingSet - An XMM compatible training set
 *
 * @return {Object} rapidMixTrainingSet - A RAPID-MIX compatible training set
 */var xmmToRapidMixTrainingSet=function xmmToRapidMixTrainingSet(xmmTrainingSet){var payload={columnNames:{input:[],output:[]},data:[]};var phrases=xmmTrainingSet.phrases;if(xmmTrainingSet.bimodal){payload.inputDimension=xmmTrainingSet.dimension_input;payload.outputDimension=xmmTrainingSet.dimension-xmmTrainingSet.dimension_input;var iDim=payload.inputDimension;var oDim=payload.outputDimension;for(var i=0;i<xmmTrainingSet.column_names.length;i++){if(i<iDim){payload.columnNames.input.push(xmmTrainingSet.column_names[i]);}else{payload.columnNames.output.push(xmmTrainingSet.column_names[i]);}}for(var _i=0;_i<phrases.length;_i++){var example={input:[],output:[],label:phrases[_i].label};for(var j=0;j<phrases[_i].length;j++){example.input.push(phrases[_i].data_input.slice(j*iDim,(j+1)*iDim));example.output.push(phrases[_i].data_output.slice(j*oDim,(j+1)*oDim));}payload.data.push(example);}}else{payload.inputDimension=xmmTrainingSet.dimension;payload.outputDimension=0;var dim=payload.inputDimension;for(var _i2=0;_i2<xmmTrainingSet.column_names.length;_i2++){payload.columnNames.input.push(xmmTrainingSet.column_names[_i2]);}for(var _i3=0;_i3<phrases.length;_i3++){var _example={input:[],output:[],label:phrases[_i3].label};for(var _j=0;_j<phrases[_i3].length;_j++){_example.input.push(phrases[_i3].data.slice(_j*dim,(_j+1)*dim));}payload.data.push(_example);}}return{docType:'rapid-mix:ml-training-set',docVersion:RAPID_MIX_DOC_VERSION,payload:payload};};/**
 * Convert a RAPID-MIX configuration Object to an XMM configuration Object.
 *
 * @param {Object} rapidMixConfig - A RAPID-MIX compatible configuraiton object
 *
 * @return {Object} xmmConfig - A configuration object ready to be used by the XMM library
 */var rapidMixToXmmConfig=function rapidMixToXmmConfig(rapidMixConfig){return rapidMixConfig.payload;};/**
 * Convert an XMM configuration Object to a RAPID-MIX configuration set Object.
 *
 * @param {Object} xmmConfig - A configuration object targeting the XMM library
 *
 * @return {Object} rapidMixConfig - A RAPID-MIX compatible configuration object
 */var xmmToRapidMixConfig=function xmmToRapidMixConfig(xmmConfig){return{docType:'rapid-mix:ml-configuration',docVersion:RAPID_MIX_DOC_VERSION,target:{name:'xmm',version:'1.0.0'},payload:xmmConfig};};/**
 * Convert a RAPID-MIX configuration Object to an XMM configuration Object.
 *
 * @param {Object} rapidMixModel - A RAPID-MIX compatible model
 *
 * @return {Object} xmmModel - A model ready to be used by the XMM library
 */var rapidMixToXmmModel=function rapidMixToXmmModel(rapidMixModel){return rapidMixModel.payload;};/**
 * Convert an XMM model Object to a RAPID-MIX model Object.
 *
 * @param {Object} xmmModel - A model generated by the XMM library
 *
 * @return {Object} rapidMixModel - A RAPID-MIX compatible model
 */var xmmToRapidMixModel=function xmmToRapidMixModel(xmmModel){var modelType=xmmModel.configuration.default_parameters.states?'hhmm':'gmm';return{docType:'rapid-mix:ml-model',docVersion:RAPID_MIX_DOC_VERSION,target:{name:'xmm',version:'1.0.0'},payload:(0,_assign2.default)({},xmmModel,{modelType:modelType})};};/*
 * @module como
 *
 * @description For the moment the como web service will only return XMM models
 * wrapped into RAPID-MIX JSON objects, taking RAPID-MIX trainings sets and XMM configurations.
 *//**
 * Create the JSON to send to the Como web service via http request.
 *
 * @param {Object} config - A valid RAPID-MIX configuration object
 * @param {Object} trainingSet - A valid RAPID-MIX training set object
 * @param {Object} [metas=null] - Some optional meta data
 * @param {Object} [signalProcessing=null] - An optional description of the pre processing used to obtain the training set
 *
 * @return {Object} httpRequest - A valid JSON to be sent to the Como web service via http request.
 */var createComoHttpRequest=function createComoHttpRequest(config,trainingSet){var metas=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var signalProcessing=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var resquest={docType:'rapid-mix:ml-http-request',docVersion:RAPID_MIX_DOC_VERSION,target:{name:'como-web-service',version:'1.0.0'},payload:{configuration:config,trainingSet:trainingSet}};if(metas!==null){resquest.payload.metas=metas;}if(signalProcessing!==null){resquest.payload.signalProcessing=signalProcessing;}return resquest;};/**
 * Create the JSON to send back as a response to http requests to the Como web service.
 *
 * @param {Object} config - A valid RAPID-MIX configuration object
 * @param {Object} model - A valid RAPID-MIX model object
 * @param {Object} [metas=null] - Some optional meta data
 * @param {Object} [signalProcessing=null] - An optional description of the pre processing used to obtain the training set
 *
 * @return {Object} httpResponse - A valid JSON response to be sent back from the Como web service via http.
 */var createComoHttpResponse=function createComoHttpResponse(config,model){var metas=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var signalProcessing=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var response={docType:'rapid-mix:ml-http-response',docVersion:RAPID_MIX_DOC_VERSION,target:{name:'como-web-service',version:'1.0.0'},payload:{configuration:config,model:model}};if(metas!==null){response.payload.metas=metas;}if(signalProcessing!==null){response.payload.signalProcessing=signalProcessing;}return response;};exports.default={// rapidLib adapters
rapidMixToRapidLibTrainingSet:rapidMixToRapidLibTrainingSet,// xmm adapters
rapidMixToXmmTrainingSet:rapidMixToXmmTrainingSet,xmmToRapidMixTrainingSet:xmmToRapidMixTrainingSet,rapidMixToXmmConfig:rapidMixToXmmConfig,xmmToRapidMixConfig:xmmToRapidMixConfig,rapidMixToXmmModel:rapidMixToXmmModel,xmmToRapidMixModel:xmmToRapidMixModel,createComoHttpRequest:createComoHttpRequest,createComoHttpResponse:createComoHttpResponse,// constants
RAPID_MIX_DOC_VERSION:RAPID_MIX_DOC_VERSION,RAPID_MIX_DEFAULT_LABEL:RAPID_MIX_DEFAULT_LABEL};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,